---
import BaseLayout from "./BaseLayout.astro";
const { frontmatter } = Astro.props;
const { headings = [] } = Astro.props;
// 1. 首先过滤出我们需要显示的标题 (h2, h3)
const filteredHeadings = headings.filter(
    (heading: any) => heading.depth > 1 && heading.depth < 4
);

// 创建一个格式化后的日期
const postDate = new Date(frontmatter.pubDate);
const formattedDate = postDate.toLocaleDateString("en-CA", {
    year: "numeric",
    month: "long",
    day: "numeric",
});
---

<BaseLayout pageTitle={frontmatter.title}>
    <div class='post-layout-grid'>
        <header class='post-header'>
            <h1>{frontmatter.title}</h1>
            <div class='post-meta'>
                <span>Author: {frontmatter.author}</span>
                <time datetime={postDate.toISOString()}
                    >Publish: {formattedDate}</time
                >
            </div>
        </header>
        {/* 2. 只有当过滤后的标题数量大于 0 时，才渲染整个目录组件 */}
        {
            filteredHeadings.length > 0 && (
                <aside class='post-toc'>
                    <div class='toc-wrapper'>
                        {/* 3. 使用 <details> 和 <summary> 实现原生折叠功能 */}
                        {/* 添加 open 属性可以让目录默认展开 */}
                        <details open>
                            <summary>
                                <h3>目录</h3>
                            </summary>
                            <ul>
                                {filteredHeadings.map((heading: any) => (
                                    <li class={`depth-${heading.depth}`}>
                                        <a href={`#${heading.slug}`}>
                                            {heading.text}
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </details>
                    </div>
                </aside>
            )
        }

        <article class='post-content'>
            <slot />
        </article>
    </div>
</BaseLayout>

<style>
    /* --- 1. 整体布局 Grid --- */
    .post-layout-grid {
        display: grid;
        /* 定义列：主内容区 (占据大部分空间) 和 侧边栏 (固定宽度) */
        /* grid-template-columns: 1fr 280px; */
        grid-template-columns: 1fr;
        /* gap: 3rem; 两栏之间的间距 */
        gap: 0;
        /* align-items: start; */
        /* --- 或者，使用这一行代码 --- */
        align-items: baseline;
    }

    /* --- 2. 文章头部样式 --- */
    .post-header {
        /* 让头部横跨两栏 */
        /* grid-column: 1 / -1; */
        padding-bottom: 2rem;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 0rem;
    }

    .post-header h1 {
        /* 继承全局 h1 样式，这里可以做微调 */
        margin-bottom: 1rem;
    }

    .post-meta {
        display: flex;
        gap: 1.5rem;
        font-size: 0.9rem;
        color: var(--secondary-text-color);
    }

    /* --- 3. 文章正文样式 --- */
    .post-content {
        /* 正文区的样式，例如行高、段落间距等 */
        line-height: 1.8;
    }

    /* 为正文中的标题、段落等元素设置统一样式 */
    .post-content > :global(h2),
    .post-content > :global(h3) {
        margin-top: 0rem;
        margin-bottom: 1rem;
    }

    .post-content > :global(p) {
        margin-bottom: 1.5rem;
    }

    /* --- 4. 目录 (TOC) 样式 --- */
    /* .post-toc {
        /* 继承全局 .table-of-contents 的部分样式，但这里做定位 */
    /* } */

    .post-toc {
        border: 1px solid var(--border-color);
        padding: 1rem 1.5rem;
        /* border-radius: 8px; 圆角 */
        border-radius: 2px;
        /* border-radius: 0; */
        margin-top: 2.5rem;
        margin-bottom: 2.5rem; /* 与下方文章内容的间距 */
        background-color: var(
            --primary-fill-color
        ); /* 可选：加个淡淡的背景色 */
    }

    /* 为 <summary> 添加一个鼠标指针样式，提示用户可以点击 */
    .post-toc summary {
        cursor: pointer;
        /* 防止点击时出现浏览器默认的轮廓线 */
        outline: none;
    }

    /* 默认的展开/收起小三角可能不好看，可以自定义样式或隐藏它 */
    .post-toc summary::-webkit-details-marker {
        /* display: none; */ /* 如果想完全隐藏，取消这行注释 */
    }

    .post-toc h3 {
        /* 让 "目录" 标题和折叠三角在同一行显示 */
        display: inline-block;
        margin: 0;
    }

    .toc-wrapper {
        /* position: sticky; */
        /* top: 100px; 距离视口顶部 100px 开始固定 */
        /* max-height: calc(100vh - 120px); */
        /* overflow-y: auto; */
    }

    .toc-wrapper h3 {
        font-size: 1rem;
        font-weight: 600;
        margin-top: 0;
        margin-bottom: 1rem;
    }

    .toc-wrapper ul {
        list-style: none;
        padding-left: 0;
    }

    .toc-wrapper a {
        display: block;
        color: var(--secondary-text-color);
        text-decoration: none;
        padding: 6px 0;
        font-size: 0.875rem;
        border-left: 2px solid transparent;
        padding-left: 1rem;
        transition: all 0.2s ease;
    }

    .toc-wrapper a:hover {
        color: var(--primary-text-color);
        background-color: var(--primary-fill-color);
    }

    .toc-wrapper li.depth-3 a {
        padding-left: 2rem; /* h3 标题缩进 */
    }

    .toc-wrapper a.active {
        color: var(--accent-color);
        border-left-color: var(--accent-color);
    }

    /* --- 5. 响应式：在小屏幕上变为单栏 --- */
    @media (max-width: 1024px) {
        .post-layout-grid {
            grid-template-columns: 1fr; /* 变为单栏 */
        }

        .post-toc {
            /* display: none; 在移动端隐藏右侧目录 */
        }
    }
</style>
